
diff --git a/macros/ktamv_config.cfg b/macros/ktamv_config.cfg
deleted file mode 100644
diff --git a/macros/ktamv_macros.cfg b/macros/ktamv_macros.cfg
deleted file mode 100644
diff --git a/webui/ b/webui/
deleted file mode 040000
diff --git a/start_server.sh b/start_server.sh
deleted file mode 100755
diff --git a/requirements.txt b/requirements.txt
index e69de29..d95f3ad 100644
--- a/requirements.txt
+++ b/requirements.txt
@@
-flask
-flask_socketio
-eventlet
-flask_cors
-requests
-opencv-python
-numpy
+flask
+opencv-python
+numpy
diff --git a/install.sh b/install.sh
new file mode 100755
--- /dev/null
+++ b/install.sh
@@
+#!/bin/bash
+
+cd ktamv_server
+
+echo "Installing dependencies..."
+pip install flask opencv-python numpy
+
+echo "Starting server..."
+python3 server.py
diff --git a/ktamv_server/server.py b/ktamv_server/server.py
index e4ad87b..7cbb96a 100644
--- a/ktamv_server/server.py
+++ b/ktamv_server/server.py
@@
-import flask_socketio
-import eventlet
-import requests
-from flask_cors import CORS
-
-app = Flask(__name__)
-CORS(app)
-socketio = flask_socketio.SocketIO(app, cors_allowed_origins="*")
+from flask import Flask, request, jsonify
+import cv2
+import numpy as np
+
+app = Flask(__name__)

-# ... andere erweiterte Routen entfernen ...
-
-@app.route('/detect_nozzle', methods=['POST'])
-def detect_nozzle():
-    # Z-Offset Code und Zusatzfunktionen löschen
-    pass
-
-# Weitere Routen wie /set_tool_offset etc. entfernen
+@app.route('/get_frame', methods=['POST'])
+def get_frame():
+    # Dummy-Rückgabe (hier solltest du die Kameralogik reinbringen)
+    return jsonify({"frame": "dummy"})
+
+@app.route('/detect_nozzle', methods=['POST'])
+def detect_nozzle():
+    return jsonify({"offset_x": 0.0, "offset_y": 0.0})
+
+@app.route('/set_origin', methods=['POST'])
+def set_origin():
+    return jsonify({"status": "origin set"})
+
+@app.route('/get_offset', methods=['POST'])
+def get_offset():
+    return jsonify({"offset_x": 0.0, "offset_y": 0.0})

-if __name__ == '__main__':
-    socketio.run(app, host='0.0.0.0', port=8085)
+if __name__ == '__main__':
+    app.run(host='0.0.0.0', port=8085)
